function [sample_matrix,sample_image,ratio]=SpiralSampler(full_image,a,tstep)
% Function Samples
% Inputs:
% - a: parameter to control spiral density ie portion of image sampled
% - image: image in matrix for
% - tstep: Density of pixel - smaller the smoother the curve
% Outputs:
% - sample_matrix: Matrix with 1s at sampled pixels, 0 otherwise
% - sample_image: Matrix of sampled pixels
% - ratio: ratio of pixels sampled

% Image size
[N,M] = size(full_image);

% Set Spiral Scale Factors (sf) 
if M > N
    sf_M = 1;
    sf_N = M/N;
else
    sf_M = N/M;
    sf_N = 1;
end

% Furtherest point from centre of image
Rmax = sqrt((sf_M*M/2)^2 + (sf_N*N/2)^2);


% Initialize sample image
sample_matrix = zeros(N,M);

% Initialize time step t and stopping parameter r.
t=0;
r=0;
i=1
while r <= Rmax % When r>Rmax spiral will never re-enter the image.
    
    % Spiral Coordinates
    x=t*cos(a*t)/sf_M;
    y=t*sin(a*t)/sf_N;

    % Distance from image centre.
    r= sqrt(x^2 + y^2);

        
    % Round to integer
    x_int = round(x+M/2);
    y_int = round(y+N/2);

    % Convert to pixel/Matrix index
    coords = [x_int,y_int];
    try linear_indices = sub2ind([N,M], coords(2), coords(1));
        % Select pixel
        sample(i)=linear_indices;
    catch
        % Spiral left image
    end
    
    % Shift to next pixel
    t = t+tstep;
    i=i+1;
end
sample = unique(sample,'')
sample_matrix(linear_indices) = 1;
% Function outputs
sample_image=sample_matrix.*full_image;

ratio = sum(sum(sample_matrix))/(N*M);
end